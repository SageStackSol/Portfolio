{"ast":null,"code":"// import { useRef, useEffect } from \"react\";\n// import { gsap } from \"gsap\";\n// import { Observer } from \"gsap/Observer\";\n\n// gsap.registerPlugin(Observer);\n\n// export default function InfiniteScroll({\n//   width = \"30rem\",\n//   maxHeight = \"100%\",\n//   negativeMargin = \"-0.5em\",\n//   items = [],\n//   itemMinHeight = 150,\n//   isTilted = false,\n//   tiltDirection = \"left\",\n//   autoplay = false,\n//   autoplaySpeed = 2000,\n//   autoplayDirection = \"down\",\n//   pauseOnHover = false,\n// }) {\n//   const wrapperRef = useRef(null);\n//   const containerRef = useRef(null);\n\n//   const getTiltTransform = () => {\n//     if (!isTilted) return \"none\";\n//     return tiltDirection === \"left\"\n//       ? \"rotateX(20deg) rotateZ(-20deg) skewX(20deg)\"\n//       : \"rotateX(20deg) rotateZ(20deg) skewX(-20deg)\";\n//   };\n\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (!container) return;\n//     if (items.length === 0) return;\n\n//     const divItems = gsap.utils.toArray(container.children);\n//     if (!divItems.length) return;\n\n//     const firstItem = divItems[0];\n//     const itemStyle = getComputedStyle(firstItem);\n//     const itemHeight = firstItem.offsetHeight;\n//     const itemMarginTop = parseFloat(itemStyle.marginTop) || 0;\n//     const totalItemHeight = itemHeight + itemMarginTop;\n//     const totalHeight =\n//       itemHeight * items.length + itemMarginTop * (items.length - 1);\n\n//     const wrapFn = gsap.utils.wrap(-totalHeight, totalHeight);\n\n//     divItems.forEach((child, i) => {\n//       const y = i * totalItemHeight;\n//       gsap.set(child, { y });\n//     });\n\n//     const observer = Observer.create({\n//       target: container,\n//       type: \"wheel,touch,pointer\",\n//       preventDefault: true,\n//       onPress: ({ target }) => {\n//         target.style.cursor = \"grabbing\";\n//       },\n//       onRelease: ({ target }) => {\n//         target.style.cursor = \"grab\";\n//       },\n//       onChange: ({ deltaY, isDragging, event }) => {\n//         const d = event.type === \"wheel\" ? -deltaY : deltaY;\n//         const distance = isDragging ? d * 5 : d * 10;\n//         divItems.forEach((child) => {\n//           gsap.to(child, {\n//             duration: 2000,\n//             ease: \"expo.out\",\n//             y: `+=${distance}`,\n//             modifiers: {\n//               y: gsap.utils.unitize(wrapFn),\n//             },\n//           });\n//         });\n//       },\n//     });\n\n//     let rafId;\n//     if (autoplay) {\n//       const directionFactor = autoplayDirection === \"down\" ? 1 : -1;\n//       const speedPerFrame = autoplaySpeed * directionFactor;\n\n//       const tick = () => {\n//         divItems.forEach((child) => {\n//           gsap.set(child, {\n//             y: `+=${speedPerFrame}`,\n//             modifiers: {\n//               y: gsap.utils.unitize(wrapFn),\n//             },\n//           });\n//         });\n//         rafId = requestAnimationFrame(tick);\n//       };\n\n//       rafId = requestAnimationFrame(tick);\n\n//       if (pauseOnHover) {\n//         const stopTicker = () => rafId && cancelAnimationFrame(rafId);\n//         const startTicker = () => (rafId = requestAnimationFrame(tick));\n\n//         container.addEventListener(\"mouseenter\", stopTicker);\n//         container.addEventListener(\"mouseleave\", startTicker);\n\n//         return () => {\n//           observer.kill();\n//           stopTicker();\n//           container.removeEventListener(\"mouseenter\", stopTicker);\n//           container.removeEventListener(\"mouseleave\", startTicker);\n//         };\n//       } else {\n//         return () => {\n//           observer.kill();\n//           rafId && cancelAnimationFrame(rafId);\n//         };\n//       }\n//     }\n\n//     return () => {\n//       observer.kill();\n//       if (rafId) cancelAnimationFrame(rafId);\n//     };\n//   }, [\n//     items,\n//     autoplay,\n//     autoplaySpeed,\n//     autoplayDirection,\n//     pauseOnHover,\n//     isTilted,\n//     tiltDirection,\n//     negativeMargin,\n//   ]);\n\n//   return (\n//     <div\n//       className=\"relative flex items-center justify-center w-full overflow-hidden overscroll-none border-t-2 border-b-2 border-t-dotted border-b-dotted border-transparent\"\n//       ref={wrapperRef}\n//       style={{ maxHeight }}\n//     >\n//       <div className=\"absolute top-0 left-0 w-full h-1/4 bg-gradient-to-b from-black to-transparent z-10 pointer-events-none\"></div>\n//       <div className=\"absolute bottom-0 left-0 w-full h-1/4 bg-gradient-to-t from-black to-transparent z-10 pointer-events-none\"></div>\n\n//       <div\n//         className=\"flex flex-col overscroll-contain px-4 cursor-grab origin-center\"\n//         ref={containerRef}\n//         style={{\n//           width,\n//           transform: getTiltTransform(),\n//         }}\n//       >\n//         {items.map((item, i) => (\n//           <div\n//             className=\"flex items-center justify-center p-4 text-xl font-semibold text-center border-2 border-glow rounded-[15px] select-none box-border relative\"\n//             key={i}\n//             style={{\n//               height: `${itemMinHeight}px`,\n//               marginTop: negativeMargin,\n//             }}\n//           >\n//             {item.content}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/Hemanth/monke matrix projects/sage-stack/src/components/infiniteScroll/InfiniteScroll.jsx"],"sourcesContent":["// import { useRef, useEffect } from \"react\";\n// import { gsap } from \"gsap\";\n// import { Observer } from \"gsap/Observer\";\n\n// gsap.registerPlugin(Observer);\n\n// export default function InfiniteScroll({\n//   width = \"30rem\",\n//   maxHeight = \"100%\",\n//   negativeMargin = \"-0.5em\",\n//   items = [],\n//   itemMinHeight = 150,\n//   isTilted = false,\n//   tiltDirection = \"left\",\n//   autoplay = false,\n//   autoplaySpeed = 2000,\n//   autoplayDirection = \"down\",\n//   pauseOnHover = false,\n// }) {\n//   const wrapperRef = useRef(null);\n//   const containerRef = useRef(null);\n\n//   const getTiltTransform = () => {\n//     if (!isTilted) return \"none\";\n//     return tiltDirection === \"left\"\n//       ? \"rotateX(20deg) rotateZ(-20deg) skewX(20deg)\"\n//       : \"rotateX(20deg) rotateZ(20deg) skewX(-20deg)\";\n//   };\n\n//   useEffect(() => {\n//     const container = containerRef.current;\n//     if (!container) return;\n//     if (items.length === 0) return;\n\n//     const divItems = gsap.utils.toArray(container.children);\n//     if (!divItems.length) return;\n\n//     const firstItem = divItems[0];\n//     const itemStyle = getComputedStyle(firstItem);\n//     const itemHeight = firstItem.offsetHeight;\n//     const itemMarginTop = parseFloat(itemStyle.marginTop) || 0;\n//     const totalItemHeight = itemHeight + itemMarginTop;\n//     const totalHeight =\n//       itemHeight * items.length + itemMarginTop * (items.length - 1);\n\n//     const wrapFn = gsap.utils.wrap(-totalHeight, totalHeight);\n\n//     divItems.forEach((child, i) => {\n//       const y = i * totalItemHeight;\n//       gsap.set(child, { y });\n//     });\n\n//     const observer = Observer.create({\n//       target: container,\n//       type: \"wheel,touch,pointer\",\n//       preventDefault: true,\n//       onPress: ({ target }) => {\n//         target.style.cursor = \"grabbing\";\n//       },\n//       onRelease: ({ target }) => {\n//         target.style.cursor = \"grab\";\n//       },\n//       onChange: ({ deltaY, isDragging, event }) => {\n//         const d = event.type === \"wheel\" ? -deltaY : deltaY;\n//         const distance = isDragging ? d * 5 : d * 10;\n//         divItems.forEach((child) => {\n//           gsap.to(child, {\n//             duration: 2000,\n//             ease: \"expo.out\",\n//             y: `+=${distance}`,\n//             modifiers: {\n//               y: gsap.utils.unitize(wrapFn),\n//             },\n//           });\n//         });\n//       },\n//     });\n\n//     let rafId;\n//     if (autoplay) {\n//       const directionFactor = autoplayDirection === \"down\" ? 1 : -1;\n//       const speedPerFrame = autoplaySpeed * directionFactor;\n\n//       const tick = () => {\n//         divItems.forEach((child) => {\n//           gsap.set(child, {\n//             y: `+=${speedPerFrame}`,\n//             modifiers: {\n//               y: gsap.utils.unitize(wrapFn),\n//             },\n//           });\n//         });\n//         rafId = requestAnimationFrame(tick);\n//       };\n\n//       rafId = requestAnimationFrame(tick);\n\n//       if (pauseOnHover) {\n//         const stopTicker = () => rafId && cancelAnimationFrame(rafId);\n//         const startTicker = () => (rafId = requestAnimationFrame(tick));\n\n//         container.addEventListener(\"mouseenter\", stopTicker);\n//         container.addEventListener(\"mouseleave\", startTicker);\n\n//         return () => {\n//           observer.kill();\n//           stopTicker();\n//           container.removeEventListener(\"mouseenter\", stopTicker);\n//           container.removeEventListener(\"mouseleave\", startTicker);\n//         };\n//       } else {\n//         return () => {\n//           observer.kill();\n//           rafId && cancelAnimationFrame(rafId);\n//         };\n//       }\n//     }\n\n//     return () => {\n//       observer.kill();\n//       if (rafId) cancelAnimationFrame(rafId);\n//     };\n//   }, [\n//     items,\n//     autoplay,\n//     autoplaySpeed,\n//     autoplayDirection,\n//     pauseOnHover,\n//     isTilted,\n//     tiltDirection,\n//     negativeMargin,\n//   ]);\n\n//   return (\n//     <div\n//       className=\"relative flex items-center justify-center w-full overflow-hidden overscroll-none border-t-2 border-b-2 border-t-dotted border-b-dotted border-transparent\"\n//       ref={wrapperRef}\n//       style={{ maxHeight }}\n//     >\n//       <div className=\"absolute top-0 left-0 w-full h-1/4 bg-gradient-to-b from-black to-transparent z-10 pointer-events-none\"></div>\n//       <div className=\"absolute bottom-0 left-0 w-full h-1/4 bg-gradient-to-t from-black to-transparent z-10 pointer-events-none\"></div>\n\n//       <div\n//         className=\"flex flex-col overscroll-contain px-4 cursor-grab origin-center\"\n//         ref={containerRef}\n//         style={{\n//           width,\n//           transform: getTiltTransform(),\n//         }}\n//       >\n//         {items.map((item, i) => (\n//           <div\n//             className=\"flex items-center justify-center p-4 text-xl font-semibold text-center border-2 border-glow rounded-[15px] select-none box-border relative\"\n//             key={i}\n//             style={{\n//               height: `${itemMinHeight}px`,\n//               marginTop: negativeMargin,\n//             }}\n//           >\n//             {item.content}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}